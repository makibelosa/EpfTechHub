@model EpfTechHub.Models.customer

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        <strong>Error !   </strong> @TempData["ErrorMessage"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span>x</span>
        </button>
    </div>
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>customer</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.lastName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">UploadFile</label>
        <input class="control-label col-md-2" type="file" id="FileUpload1" />
    </div>
    <div class="form-group" style="position: relative; height:30vh; width:30vw">
        <canvas class="bar-chart"></canvas>

    </div>


</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src=https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js>
    </script>
    <script src=https://cdn.jsdelivr.net/npm/chart.js@2.8.0></script>
    <script src=https://cdn.jsdelivr.net/npm/xlsx@0.14.3/dist/xlsx.full.min.js></script>
    <script src=https://cdn.jsdelivr.net/npm/chartjs-plugin-datasource@0.1.0></script>
    <script>


        var fileName = "";

        var chartGraph;

        $(document).ready(function () {

            $('#FileUpload1').change(function () {

                // Checking whether FormData is available in browser

                if (window.FormData !== undefined) {



                    var fileUpload = $("#FileUpload1").get(0);

                    var files = fileUpload.files;

                    fileName = fileUpload.files[0].name;

                    debugger;

                    // Create FormData object

                    var fileData = new FormData();



                    // Looping over all files and add it to FormData object

                    for (var i = 0; i < files.length; i++) {

                        fileData.append(files[i].name, files[i]);

                    }



                    // Adding one more key to FormData object

                    fileData.append('username', 'Manas');



                    $.ajax({

                        url: '/Customer/UploadFiles',

                        type: "POST",

                        contentType: false, // Not to set any content header

                        processData: false, // Not to process data

                        data: fileData,

                        success: function (result) {

                       
                            RenderGraph();

                        },

                        error: function (err) {

                            alert(err.statusText);

                        }

                    });

                } else {

                    alert("FormData is not supported.");

                }

            });

        });

        function RenderGraph() {

            var ctx = document.getElementsByClassName("bar-chart");
            //Type, data, options



            if (chartGraph != undefined) {

                chartGraph.destroy();

            }

            chartGraph = new Chart(ctx, {

                type: 'bar',

                data: {

                    datasets: [{

                        borderWidth: 6,

                        borderColor: 'rgba(146, 242, 42, 0.85)',

                        fill: false

                    }, {

                        borderWidth: 6,

                        borderColor: 'rgba(207, 0, 15, 0.85)',

                        fill: false

                    }

                    ]

                },

                plugins: [ChartDataSource],

                options: {

                    title: {

                        display: true,

                        fontSize: 20,

                        text: 'ENCARTUCHAMENTO 05'

                    },

                    scales: {



                        yAxes: [{



                            id: 'Income',

                            gridLines: {



                                drawOnChartArea: false



                            }



                        }, {



                            id: 'Expense',

                            gridLines: {



                                drawOnChartArea: false



                            }



                        }]



                    },

                    plugins: {

                        datasource: {

                            url: '/Uploads/' + fileName,

                            rowMapping: 'index'

                        }

                    }

                }

            });

        }

    </script>
}
